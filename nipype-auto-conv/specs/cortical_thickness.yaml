# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.ants.segmentation.CorticalThickness' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Inputs
# ------
# dimension : enum
#    image dimension (2 or 3)
# anatomical_image : file
#    Structural *intensity* image, typically T1. If more than one anatomical image is specified, subsequently specified images are used during the segmentation process. However, only the first image is used in the registration of priors. Our suggestion would be to specify the T1 as the first image.
# brain_template : file
#    Anatomical *intensity* template (possibly created using a population data set with buildtemplateparallel.sh in ANTs). This template is  *not* skull-stripped.
# brain_probability_mask : file
#    brain probability mask in template space
# segmentation_priors : inputmultiobject
#    
# out_prefix : str
#    Prefix that is prepended to all output files
# image_suffix : str
#    any of standard ITK formats, nii.gz is default
# t1_registration_template : file
#    Anatomical *intensity* template (assumed to be skull-stripped). A common case would be where this would be the same template as specified in the -e option which is not skull stripped.
# extraction_registration_mask : file
#    Mask (defined in the template space) used during registration for brain extraction.
# keep_temporary_files : int
#    Keep brain extraction/segmentation warps, etc (default = 0).
# max_iterations : int
#    ANTS registration max iterations (default = 100x100x70x20)
# prior_segmentation_weight : float
#    Atropos spatial prior *probability* weight for the segmentation
# segmentation_iterations : int
#    N4 -> Atropos -> N4 iterations during segmentation (default = 3)
# posterior_formulation : str
#    Atropos posterior formulation and whether or not to use mixture model proportions. e.g 'Socrates[1]' (default) or 'Aristotle[1]'. Choose the latter if you want use the distance priors (see also the -l option for label propagation control).
# use_floatingpoint_precision : enum
#    Use floating point precision in registrations (default = 0)
# use_random_seeding : enum
#    Use random number generated from system clock in Atropos (default = 1)
# b_spline_smoothing : bool
#    Use B-spline SyN for registrations and B-spline exponential mapping in DiReCT.
# cortical_label_image : file
#    Cortical ROI labels to use as a prior for ATITH.
# label_propagation : str
#    Incorporate a distance prior one the posterior formulation.  Should be of the form 'label[lambda,boundaryProbability]' where label is a value of 1,2,3,... denoting label ID.  The label probability for anything outside the current label = boundaryProbability * exp( -lambda * distanceFromBoundary ) Intuitively, smaller lambda values will increase the spatial capture range of the distance prior.  To apply to all label values, simply omit specifying the label, i.e. -l [lambda,boundaryProbability].
# quick_registration : bool
#    If = 1, use antsRegistrationSyNQuick.sh as the basis for registration during brain extraction, brain segmentation, and (optional) normalization to a template. Otherwise use antsRegistrationSyN.sh (default = 0).
# debug : bool
#    If > 0, runs a faster version of the script. Only for testing. Implies -u 0. Requires single thread computation for complete reproducibility.
# num_threads : int
#    Number of ITK threads to use
# args : str
#    Additional parameters to the command
# environ : dict
#    Environment variables
#
# Outputs
# -------
# BrainExtractionMask : file
#    brain extraction mask
# ExtractedBrainN4 : file
#    extracted brain from N4 image
# BrainSegmentation : file
#    brain segmentation image
# BrainSegmentationN4 : file
#    N4 corrected image
# BrainSegmentationPosteriors : outputmultiobject
#    Posterior probability images
# CorticalThickness : file
#    cortical thickness file
# TemplateToSubject1GenericAffine : file
#    Template to subject affine
# TemplateToSubject0Warp : file
#    Template to subject warp
# SubjectToTemplate1Warp : file
#    Template to subject inverse warp
# SubjectToTemplate0GenericAffine : file
#    Template to subject inverse affine
# SubjectToTemplateLogJacobian : file
#    Template to subject log jacobian
# CorticalThicknessNormedToTemplate : file
#    Normalized cortical thickness
# BrainVolumes : file
#    Brain volumes as text
#
# Docs
# ----
# 
#     Examples
#     --------
#     >>> from nipype.interfaces.ants.segmentation import CorticalThickness
#     >>> corticalthickness = CorticalThickness()
#     >>> corticalthickness.inputs.dimension = 3
#     >>> corticalthickness.inputs.anatomical_image ='T1.nii.gz'
#     >>> corticalthickness.inputs.brain_template = 'study_template.nii.gz'
#     >>> corticalthickness.inputs.brain_probability_mask ='ProbabilityMaskOfStudyTemplate.nii.gz'
#     >>> corticalthickness.inputs.segmentation_priors = ['BrainSegmentationPrior01.nii.gz',
#     ...                                                 'BrainSegmentationPrior02.nii.gz',
#     ...                                                 'BrainSegmentationPrior03.nii.gz',
#     ...                                                 'BrainSegmentationPrior04.nii.gz']
#     >>> corticalthickness.inputs.t1_registration_template = 'brain_study_template.nii.gz'
#     >>> corticalthickness.cmdline
#     'antsCorticalThickness.sh -a T1.nii.gz -m ProbabilityMaskOfStudyTemplate.nii.gz
#     -e study_template.nii.gz -d 3 -s nii.gz -o antsCT_
#     -p nipype_priors/BrainSegmentationPrior%02d.nii.gz -t brain_study_template.nii.gz'
# 
#     
task_name: cortical_thickness
nipype_name: CorticalThickness
nipype_module: nipype.interfaces.ants.segmentation
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    anatomical_image: medimage/nifti-gz
    brain_template: medimage/nifti-gz
    brain_probability_mask: medimage/nifti-gz
    segmentation_priors: medimage/nifti-gz+list-of
    t1_registration_template: medimage/nifti-gz
    extraction_registration_mask: generic/file
    cortical_label_image: generic/file
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    BrainExtractionMask: generic/file
    ExtractedBrainN4: generic/file
    BrainSegmentation: generic/file
    BrainSegmentationN4: generic/file
    CorticalThickness: generic/file
    TemplateToSubject1GenericAffine: generic/file
    TemplateToSubject0Warp: generic/file
    SubjectToTemplate1Warp: generic/file
    SubjectToTemplate0GenericAffine: generic/file
    SubjectToTemplateLogJacobian: generic/file
    CorticalThicknessNormedToTemplate: generic/file
    BrainVolumes: generic/file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dimension: '3'
    anatomical_image:
    brain_template:
    brain_probability_mask:
    segmentation_priors:
    t1_registration_template:
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: antsCorticalThickness.sh -a T1.nii.gz -m ProbabilityMaskOfStudyTemplate.nii.gz -e study_template.nii.gz -d 3 -s nii.gz -o antsCT_ -p nipype_priors/BrainSegmentationPrior%02d.nii.gz -t brain_study_template.nii.gz
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    dimension: '3'
    anatomical_image:
    brain_template:
    brain_probability_mask:
    segmentation_priors:
    t1_registration_template:
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive: ''''
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
