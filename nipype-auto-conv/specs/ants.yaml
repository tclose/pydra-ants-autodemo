# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.ants.registration.ANTS' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Inputs
# ------
# dimension : enum
#    image dimension (2 or 3)
# fixed_image : inputmultiobject
#    image to which the moving image is warped
# moving_image : inputmultiobject
#    image to apply transformation to (generally a coregisteredfunctional)
# metric : list
#    
# metric_weight : list
#    the metric weight(s) for each stage. The weights must sum to 1 per stage.
# radius : list
#    radius of the region (i.e. number of layers around a voxel/pixel) that is used for computing cross correlation
# output_transform_prefix : str
#    
# transformation_model : enum
#    
# gradient_step_length : float
#    
# number_of_time_steps : int
#    
# delta_time : float
#    
# symmetry_type : float
#    
# use_histogram_matching : bool
#    
# number_of_iterations : list
#    
# smoothing_sigmas : list
#    
# subsampling_factors : list
#    
# affine_gradient_descent_option : list
#    
# mi_option : list
#    
# regularization : enum
#    
# regularization_gradient_field_sigma : float
#    
# regularization_deformation_field_sigma : float
#    
# number_of_affine_iterations : list
#    
# num_threads : int
#    Number of ITK threads to use
# args : str
#    Additional parameters to the command
# environ : dict
#    Environment variables
#
# Outputs
# -------
# affine_transform : file
#    Affine transform file
# warp_transform : file
#    Warping deformation field
# inverse_warp_transform : file
#    Inverse warping deformation field
# metaheader : file
#    VTK metaheader .mhd file
# metaheader_raw : file
#    VTK metaheader .raw file
#
# Docs
# ----
# ANTS wrapper for registration of images
#     (old, use Registration instead)
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.ants import ANTS
#     >>> ants = ANTS()
#     >>> ants.inputs.dimension = 3
#     >>> ants.inputs.output_transform_prefix = 'MY'
#     >>> ants.inputs.metric = ['CC']
#     >>> ants.inputs.fixed_image = ['T1.nii']
#     >>> ants.inputs.moving_image = ['resting.nii']
#     >>> ants.inputs.metric_weight = [1.0]
#     >>> ants.inputs.radius = [5]
#     >>> ants.inputs.transformation_model = 'SyN'
#     >>> ants.inputs.gradient_step_length = 0.25
#     >>> ants.inputs.number_of_iterations = [50, 35, 15]
#     >>> ants.inputs.use_histogram_matching = True
#     >>> ants.inputs.mi_option = [32, 16000]
#     >>> ants.inputs.regularization = 'Gauss'
#     >>> ants.inputs.regularization_gradient_field_sigma = 3
#     >>> ants.inputs.regularization_deformation_field_sigma = 0
#     >>> ants.inputs.number_of_affine_iterations = [10000,10000,10000,10000,10000]
#     >>> ants.cmdline
#     'ANTS 3 --MI-option 32x16000 --image-metric CC[ T1.nii, resting.nii, 1, 5 ] --number-of-affine-iterations 10000x10000x10000x10000x10000 --number-of-iterations 50x35x15 --output-naming MY --regularization Gauss[3.0,0.0] --transformation-model SyN[0.25] --use-Histogram-Matching 1'
#     
task_name: ants
nipype_name: ANTS
nipype_module: nipype.interfaces.ants.registration
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    fixed_image: medimage/nifti1+list-of
    moving_image: medimage/nifti1+list-of
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    affine_transform: generic/file
    warp_transform: generic/file
    inverse_warp_transform: generic/file
    metaheader: generic/file
    metaheader_raw: generic/file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dimension: '3'
    output_transform_prefix: '"MY"'
    metric: '["CC"]'
    fixed_image:
    moving_image:
    metric_weight: '[1.0]'
    radius: '[5]'
    transformation_model: '"SyN"'
    gradient_step_length: '0.25'
    number_of_iterations: '[50, 35, 15]'
    use_histogram_matching: 'True'
    mi_option: '[32, 16000]'
    regularization: '"Gauss"'
    regularization_gradient_field_sigma: '3'
    regularization_deformation_field_sigma: '0'
    number_of_affine_iterations: '[10000,10000,10000,10000,10000]'
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: ANTS 3 --MI-option 32x16000 --image-metric CC[ T1.nii, resting.nii, 1, 5 ] --number-of-affine-iterations 10000x10000x10000x10000x10000 --number-of-iterations 50x35x15 --output-naming MY --regularization Gauss[3.0,0.0] --transformation-model SyN[0.25] --use-Histogram-Matching 1
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    dimension: '3'
    output_transform_prefix: '"MY"'
    metric: '["CC"]'
    fixed_image:
    moving_image:
    metric_weight: '[1.0]'
    radius: '[5]'
    transformation_model: '"SyN"'
    gradient_step_length: '0.25'
    number_of_iterations: '[50, 35, 15]'
    use_histogram_matching: 'True'
    mi_option: '[32, 16000]'
    regularization: '"Gauss"'
    regularization_gradient_field_sigma: '3'
    regularization_deformation_field_sigma: '0'
    number_of_affine_iterations: '[10000,10000,10000,10000,10000]'
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive: ''''
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
